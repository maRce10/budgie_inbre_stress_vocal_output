scale_fill_brewer(palette="Paired")+
theme_minimal()
library(ggplot2)
# Create the barplot
ggplot(data=df_cumsum, aes(x=dose, y=len, fill=supp)) +
geom_bar(stat="identity")+
geom_text(aes(y=label_ypos, label=len), vjust=1.6,
color="white", size=3.5)+
scale_fill_brewer(palette="Paired")+
theme_minimal()
df_cumsum
opts_knit$set(root.dir = "..")
# set evaluation false
opts_chunk$set( fig.width = 6, fig.height = 3, warning = FALSE, message = FALSE, tidy = TRUE)
read_excel_df <- function(...) data.frame(read_excel(...))
## add 'developer' to packages to be installed from github
x <- c("lubridate", "readxl", "pbapply", "viridis", "ggplot2", "kableExtra", "knitr", "formatR")
aa <- lapply(x, function(y) {
# get pakage name
pkg <- strsplit(y, "/")[[1]]
pkg <- pkg[length(pkg)]
# check if installed, if not then install
if (!pkg %in% installed.packages()[,"Package"])  {
if (grepl("/", y))  devtools::install_github(y, force = TRUE) else
install.packages(y)
}
# load package
a <- try(require(pkg, character.only = T), silent = T)
if (!a) remove.packages(pkg)
})
## add 'developer' to packages to be installed from github
x <- c("lubridate", "readxl", "pbapply", "viridis", "ggplot2", "kableExtra", "knitr", "formatR", "randomForest")
aa <- lapply(x, function(y) {
# get pakage name
pkg <- strsplit(y, "/")[[1]]
pkg <- pkg[length(pkg)]
# check if installed, if not then install
if (!pkg %in% installed.packages()[,"Package"])  {
if (grepl("/", y))  devtools::install_github(y, force = TRUE) else
install.packages(y)
}
# load package
a <- try(require(pkg, character.only = T), silent = T)
if (!a) remove.packages(pkg)
})
opts_knit$set(root.dir = "..")
# set evaluation false
opts_chunk$set( fig.width = 6, fig.height = 3, warning = FALSE, message = FALSE, tidy = TRUE)
read_excel_df <- function(...) data.frame(read_excel(...))
# read ext sel tab calls
sels <- read.csv("./data/processed/tailored_budgie_calls_sel_tab.csv")
# keep only spectrographic parameters
sels <- sels[ , c("sound.files", "selec", "duration", "meanfreq", "sd", "freq.median", "freq.IQR", "time.IQR", "skew",  "kurt", "sp.ent", "time.ent", "entropy", "meandom", "mindom", "maxdom", "dfrange",  "modindx", "meanpeakf")]
sels$ID <- sapply(sels$sound.files, function(x) strsplit(x, "_")[[1]][1])
sels$month <- sapply(sels$sound.files, function(x) strsplit(x, "_")[[1]][2])
sels$day <- sapply(sels$sound.files, function(x) strsplit(x, "_")[[1]][3])
sels$year <- sapply(sels$sound.files, function(x) strsplit(x, "_")[[1]][4])
sels$date <- paste(sels$day, substr(sels$month, 0, 3), sels$year, sep = "-")
Sys.setlocale(locale = "en_US.UTF-8")
sels$date <- as.Date(sels$date, format = "%d-%b-%Y")
df <- as.data.frame(table(sels$ID))
names(df) <- c("ID", "Sample_size")
df <- df[order(df$Sample_size, decreasing = FALSE), ]
kb <-kable(df, row.names = FALSE)
kb <- kable_styling(kb, bootstrap_options = c("striped", "hover", "condensed", "responsive"))
print(kb)
metadat <- read_excel_df("./data/raw/INBREStress_MasterDataSheet_14Nov19.xlsx")
# head(metadat)
sels$ID[sels$ID == "125YGMM"] <- "125YGHM"
sels$ID[sels$ID == "394YBHM"] <- "394WBHM"
# setdiff(sels$ID, metadat$Bird.ID)
# setdiff(metadat$Bird.ID, sels$ID)
sels$treatment <- sapply(1:nrow(sels), function(x) {
metadat$Treatment[metadat$Bird.ID == sels$ID[x]][1]
})
sels$treatment.room <- sapply(1:nrow(sels), function(x) {
metadat$Treatment.Room[metadat$Bird.ID == sels$ID[x]][1]
})
sels$round <- sapply(1:nrow(sels), function(x) {
metadat$Round[metadat$Bird.ID == sels$ID[x]][1]
})
sels$source.room <- sapply(1:nrow(sels), function(x) {
metadat$Source.Room[metadat$Bird.ID == sels$ID[x]][1]
})
sels$record.group <- sapply(1:nrow(sels), function(x) {
metadat$Record.Group[metadat$Bird.ID == sels$ID[x]][1]
})
# add week
out <- lapply(unique(sels$round), function(x){
Y <- sels[sels$round == x, ]
min_date <- min(Y$date)
week_limits <- min_date + seq(0, 100,  by = 7)
Y$week <- NA
for (i in 2:length(week_limits))
Y$week[Y$date >= week_limits[i - 1] & Y$date < week_limits[i]] <- i - 1
return(Y)
})
sels <- do.call(rbind, out)
sels$cort.baseline <- sapply(1:nrow(sels), function(x) {
if (sels$week[x] == 1)
out <- metadat$D3.CORT.Baseline[metadat$Bird.ID == sels$ID[x]][1]
if (sels$week[x] == 2)
out <- metadat$D7.CORT.Baseline[metadat$Bird.ID == sels$ID[x]][1]
if (sels$week[x] == 3)
out <- metadat$D14.CORT.Baseline[metadat$Bird.ID == sels$ID[x]][1]
if (sels$week[x] == 4)
out <- metadat$D21.CORT.Baseline[metadat$Bird.ID == sels$ID[x]][1]
if (sels$week[x] == 5)
out <- metadat$D28.CORT.Baseline[metadat$Bird.ID == sels$ID[x]][1]
return(out)
})
sels$cort.stress <- sapply(1:nrow(sels), function(x) {
if (sels$week[x] == 1)
out <- metadat$D3.CORT.Stress[metadat$Bird.ID == sels$ID[x]][1]
if (sels$week[x] == 2)
out <- metadat$D7.CORT.Stress[metadat$Bird.ID == sels$ID[x]][1]
if (sels$week[x] == 3)
out <- metadat$D14.CORT.Stress[metadat$Bird.ID == sels$ID[x]][1]
if (sels$week[x] == 4)
out <- metadat$D21.CORT.Stress[metadat$Bird.ID == sels$ID[x]][1]
if (sels$week[x] == 5)
out <- metadat$D28.CORT.Stress[metadat$Bird.ID == sels$ID[x]][1]
return(out)
})
sels$weight <- sapply(1:nrow(sels), function(x) {
if (sels$week[x] == 1)
out <- metadat$D3.Bird.Weight..g.[metadat$Bird.ID == sels$ID[x]][1]
if (sels$week[x] == 2)
out <- metadat$D7.Bird.Weight..g.[metadat$Bird.ID == sels$ID[x]][1]
if (sels$week[x] == 3)
out <- metadat$D14.Bird.Weight..g.[metadat$Bird.ID == sels$ID[x]][1]
if (sels$week[x] == 4)
out <- metadat$D21.Bird.Weight..g.[metadat$Bird.ID == sels$ID[x]][1]
if (sels$week[x] == 5)
out <- metadat$D28.Bird.Weight..g.[metadat$Bird.ID == sels$ID[x]][1]
return(out)
})
sels$breath.count <- sapply(1:nrow(sels), function(x) {
if (sels$week[x] == 1)
out <- metadat$D3.Breath.Count[metadat$Bird.ID == sels$ID[x]][1]
if (sels$week[x] == 2)
out <- metadat$D7.Breath.Count[metadat$Bird.ID == sels$ID[x]][1]
if (sels$week[x] == 3)
out <- metadat$D14.Bird.Weight..g.[metadat$Bird.ID == sels$ID[x]][1]
if (sels$week[x] == 4)
out <- metadat$D21.Bird.Weight..g.[metadat$Bird.ID == sels$ID[x]][1]
if (sels$week[x] == 5)
out <- metadat$D28.Bird.Weight..g.[metadat$Bird.ID == sels$ID[x]][1]
return(out)
})
breath.count <- stack(metadat[, c("D3.Breath.Count", "D7.Breath.Count", "D14.Breath.Count", "D21.Breath.Count", "D28.Breath.Count")])
weight <- stack(metadat[, c("D3.Bird.Weight..g.", "D7.Bird.Weight..g.", "D14.Bird.Weight..g.", "D21.Bird.Weight..g.", "D28.Bird.Weight..g.")])
cort.stress <- stack(metadat[, c("D3.CORT.Stress", "D7.CORT.Stress", "D14.CORT.Stress", "D21.CORT.Stress", "D28.CORT.Stress")])
cort.baseline <- stack(metadat[, c("D3.CORT.Baseline", "D7.CORT.Baseline", "D14.CORT.Baseline", "D21.CORT.Baseline", "D28.CORT.Baseline")])
stress <- data.frame(metadat[, c("Bird.ID", "Treatment", "Round", "Treatment.Room")], week = breath.count$ind, breath.count = breath.count$values, weight = weight$values, cort.stress = cort.stress$values, cort.baseline = cort.baseline$values)
# head(stress)
stress$week <- factor(sapply(strsplit(as.character(stress$week), "\\."), "[[", 1), levels = c("D3", "D7", "D14", "D21", "D28"))
stress$day <- as.numeric(gsub("D", "", as.character(stress$week)))
stress$round <- paste("Round", stress$Round)
stress$treatment <- factor(stress$Treatment, levels = c("Control", "Medium Stress", "High Stress"))
ggplot(data = stress, aes(x = day, y = weight, group = Bird.ID, col = treatment)) +
geom_point() +
geom_line(size = 1.2) +
scale_color_viridis_d(begin = 0.1, end = 0.9) +
facet_wrap(~ round, ncol = 2) +
labs(y = "Weight (g)", x = "Day sample was taken") +
theme_classic(base_size = 30) +
scale_x_continuous(breaks = c(3, 7, 14, 21, 28), labels = c(3, 7, 14, 21, 28)) +
theme(legend.position = c(0.8, 0.25))
ggplot(data = stress, aes(x = day, y = breath.count, group = Bird.ID, col = treatment)) +
geom_point() +
geom_line(size = 1.2) +
scale_color_viridis_d(begin = 0.1, end = 0.9) +
facet_wrap(~ round, ncol = 2) +
labs(y = "Breath count", x = "Day sample was taken") +
theme_classic(base_size = 30) +
scale_x_continuous(breaks = c(3, 7, 14, 21, 28), labels = c(3, 7, 14, 21, 28)) +
theme(legend.position = c(0.8, 0.25))
ggplot(data = stress, aes(x = day, y = cort.baseline, group = Bird.ID, col = treatment)) +
geom_point() +
geom_line(size = 1.2) +
scale_color_viridis_d(begin = 0.1, end = 0.9) +
facet_wrap(~ round, ncol = 2) +
labs(y = "Baseline CORT", x = "Day sample was taken") +
theme_classic(base_size = 30) +
scale_x_continuous(breaks = c(3, 7, 14, 21, 28), labels = c(3, 7, 14, 21, 28)) +
theme(legend.position = c(0.8, 0.25))
ggplot(data = stress, aes(x = day, y = cort.stress, group = Bird.ID, col = treatment)) +
geom_point() +
geom_line(size = 1.2) +
scale_color_viridis_d(begin = 0.1, end = 0.9) +
facet_wrap(~ round, ncol = 2) +
labs(y = "Stress CORT", x = "Day sample was taken") +
theme_classic(base_size = 30) +
scale_x_continuous(breaks = c(3, 7, 14, 21, 28), labels = c(3, 7, 14, 21, 28)) +
theme(legend.position = c(0.8, 0.25))
urfmod <- randomForest(x = sels[, c("duration", "meanfreq", "sd", "freq.median", "freq.IQR", "time.IQR", "skew",  "kurt", "sp.ent", "time.ent", "entropy", "meandom", "mindom", "maxdom", "dfrange",  "modindx", "meanpeakf")], importance = TRUE, proximity = TRUE, ntree = 10000)
saveRDS(urfmod, "./data/processed/unsupervised_random_forest_model_budgie_calls_stress_jun_2021.RDS")
print(1- sum(urfmod$votes[,1] > urfmod$votes[,2])/ nrow(urfmod$votes))
mds_urf_prox  <- cmdscale(1 - urfmod$proximity, k = 2)
saveRDS(mds_urf_prox, "./data/processed/MDS_unsupervised_random_forest_model_budgie_calls_stress_jun_2021.RDS")
urfmod <- readRDS("./data/processed/unsupervised_random_forest_model_budgie_calls_stress_jun_2021.RDS")
print(1- sum(urfmod$votes[,1] > urfmod$votes[,2])/ nrow(urfmod$votes))
vimp <- varImpPlot(urfmod, col = "black", pch = 20, pt.cex = 1.5, n.var = 15, main ="Random Forest classification of cultural evolution models")
vimp <- as.data.frame(vimp)
vimp$params <- rownames(vimp)
vimp <- vimp[order(vimp$MeanDecreaseAccuracy),]
vimp$params <- as.factor(vimp$params)
vimp$params <- factor(vimp$params, levels = vimp$params[!duplicated(vimp$params)])
vimp <- vimp[(nrow(vimp)-15):nrow(vimp), ]
theme_set(theme_classic(base_size = 30))
ggplot(vimp, aes(x = MeanDecreaseAccuracy, y = params)) +
geom_segment(aes(yend = params),  xend = 0, color = "grey50", size = 1) +
geom_point(size = 10, col = cols[8]) +
labs(x = "Mean decrease accuracy (RF)", y = "Predictors") + theme(legend.key.size = unit(2, 'lines')) +  scale_color_discrete(name = "Parameter set") +  scale_fill_discrete(guide = FALSE)
print(1- sum(urfmod$votes[,1] > urfmod$votes[,2])/ nrow(urfmod$votes))
mds_urf_prox
mds_urf_prox <- readRDS("./data/processed/MDS_unsupervised_random_forest_model_budgie_calls_stress_jun_2021.RDS")
sels$MDS1 <- mds_urf_prox[,1]
sels$MDS1 <- mds_urf_prox[, 1]
sels$MDS1 <- mds_urf_prox[, 2]
scale_acous_param <- scale(sels[, c("duration", "meanfreq", "sd", "freq.median", "freq.IQR", "time.IQR", "skew",  "kurt", "sp.ent", "time.ent", "entropy", "meandom", "mindom", "maxdom", "dfrange",  "modindx", "meanpeakf")])
scale_acous_param
urfmod <- randomForest(x = scale_acous_param, importance = TRUE, proximity = TRUE, ntree = 10000)
princomp(x = scale_acous_param, cor = TRUE)
pca <- princomp(x = scale_acous_param, cor = TRUE)
saveRDS(urfmod, "./data/processed/unsupervised_random_forest_model_budgie_calls_stress_jun_2021.RDS")
mds_urf_prox  <- cmdscale(1 - urfmod$proximity, k = 2)
saveRDS(mds_urf_prox, "./data/processed/MDS_unsupervised_random_forest_model_budgie_calls_stress_jun_2021.RDS")
head(mds_urf_prox)
str(mds_urf_prox)
plot(mds_urf_prox)
pca <- princomp(x = scale_acous_param, cor = TRUE)
plot(pca$scores[,1:2])
## add 'developer' to packages to be installed from github
x <- c("lubridate", "readxl", "pbapply", "viridis", "ggplot2", "kableExtra", "knitr", "formatR", "randomForest")
aa <- lapply(x, function(y) {
# get pakage name
pkg <- strsplit(y, "/")[[1]]
pkg <- pkg[length(pkg)]
# check if installed, if not then install
if (!pkg %in% installed.packages()[,"Package"])  {
if (grepl("/", y))  devtools::install_github(y, force = TRUE) else
install.packages(y)
}
# load package
a <- try(require(pkg, character.only = T), silent = T)
if (!a) remove.packages(pkg)
})
opts_knit$set(root.dir = "..")
# set evaluation false
opts_chunk$set( fig.width = 6, fig.height = 3, warning = FALSE, message = FALSE, tidy = TRUE)
read_excel_df <- function(...) data.frame(read_excel(...))
# read ext sel tab calls
sels <- read.csv("./data/processed/tailored_budgie_calls_sel_tab.csv")
# keep only spectrographic parameters
sels <- sels[ , c("sound.files", "selec", "duration", "meanfreq", "sd", "freq.median", "freq.IQR", "time.IQR", "skew",  "kurt", "sp.ent", "time.ent", "entropy", "meandom", "mindom", "maxdom", "dfrange",  "modindx", "meanpeakf")]
sels$ID <- sapply(sels$sound.files, function(x) strsplit(x, "_")[[1]][1])
sels$month <- sapply(sels$sound.files, function(x) strsplit(x, "_")[[1]][2])
sels$day <- sapply(sels$sound.files, function(x) strsplit(x, "_")[[1]][3])
sels$year <- sapply(sels$sound.files, function(x) strsplit(x, "_")[[1]][4])
sels$date <- paste(sels$day, substr(sels$month, 0, 3), sels$year, sep = "-")
Sys.setlocale(locale = "en_US.UTF-8")
sels$date <- as.Date(sels$date, format = "%d-%b-%Y")
df <- as.data.frame(table(sels$ID))
names(df) <- c("ID", "Sample_size")
df <- df[order(df$Sample_size, decreasing = FALSE), ]
kb <-kable(df, row.names = FALSE)
kb <- kable_styling(kb, bootstrap_options = c("striped", "hover", "condensed", "responsive"))
print(kb)
# read ext sel tab calls
sels <- read.csv("./data/processed/tailored_budgie_calls_sel_tab.csv")
# keep only spectrographic parameters
sels <- sels[ , c("sound.files", "selec", "duration", "meanfreq", "sd", "freq.median", "freq.IQR", "time.IQR", "skew",  "kurt", "sp.ent", "time.ent", "entropy", "meandom", "mindom", "maxdom", "dfrange",  "modindx", "meanpeakf")]
sels$ID <- sapply(sels$sound.files, function(x) strsplit(x, "_")[[1]][1])
sels$month <- sapply(sels$sound.files, function(x) strsplit(x, "_")[[1]][2])
sels$day <- sapply(sels$sound.files, function(x) strsplit(x, "_")[[1]][3])
sels$year <- sapply(sels$sound.files, function(x) strsplit(x, "_")[[1]][4])
sels$date <- paste(sels$day, substr(sels$month, 0, 3), sels$year, sep = "-")
sl <- Sys.setlocale(locale = "en_US.UTF-8")
sels$date <- as.Date(sels$date, format = "%d-%b-%Y")
urfmod <- readRDS("./data/processed/unsupervised_random_forest_model_budgie_calls_stress_jun_2021.RDS")
print(1- sum(urfmod$votes[,1] > urfmod$votes[,2])/ nrow(urfmod$votes))
vimp <- as.data.frame(vimp)
vimp$params <- rownames(vimp)
vimp <- vimp[order(vimp$MeanDecreaseAccuracy),]
vimp$params <- as.factor(vimp$params)
vimp$params <- factor(vimp$params, levels = vimp$params[!duplicated(vimp$params)])
vimp <- vimp[(nrow(vimp)-15):nrow(vimp), ]
ggplot(vimp, aes(x = MeanDecreaseAccuracy, y = params)) +
geom_segment(aes(yend = params),  xend = 0, color = "grey50", size = 1) +
geom_point(size = 10, col = viridis(10, alpha = 0.6)[2]) +
labs(x = "Mean decrease accuracy (RF)", y = "Predictors") + theme(legend.key.size = unit(2, 'lines')) +  scale_color_discrete(name = "Parameter set") +  scale_fill_discrete(guide = "none") +
theme_classic(base_size = 30)
vimp <- varImpPlot(urfmod, col = "black", pch = 20, pt.cex = 1.5, n.var = 15, main ="Random Forest classification of cultural evolution models")
vimp <- as.data.frame(vimp)
vimp$params <- rownames(vimp)
vimp <- vimp[order(vimp$MeanDecreaseAccuracy),]
vimp$params <- as.factor(vimp$params)
vimp$params <- factor(vimp$params, levels = vimp$params[!duplicated(vimp$params)])
vimp <- vimp[(nrow(vimp)-15):nrow(vimp), ]
ggplot(vimp, aes(x = MeanDecreaseAccuracy, y = params)) +
geom_segment(aes(yend = params),  xend = 0, color = "grey50", size = 1) +
geom_point(size = 10, col = viridis(10, alpha = 0.6)[2]) +
labs(x = "Mean decrease accuracy (RF)", y = "Predictors") + theme(legend.key.size = unit(2, 'lines')) +  scale_color_discrete(name = "Parameter set") +  scale_fill_discrete(guide = "none") +
theme_classic(base_size = 30)
mds_urf_prox <- readRDS("./data/processed/MDS_unsupervised_random_forest_model_budgie_calls_stress_jun_2021.RDS")
sels$MDS1 <- mds_urf_prox[, 1]
sels$MDS1 <- mds_urf_prox[, 2]
pca <- princomp(x = scale_acous_param, cor = TRUE)
scale_acous_param <- scale(sels[, c("duration", "meanfreq", "sd", "freq.median", "freq.IQR", "time.IQR", "skew",  "kurt", "sp.ent", "time.ent", "entropy", "meandom", "mindom", "maxdom", "dfrange",  "modindx", "meanpeakf")])
pca <- princomp(x = scale_acous_param, cor = TRUE)
plot(pca$scores[,1:2])
unique(sels$ID)
## add 'developer' to packages to be installed from github
x <- c("lubridate", "readxl", "pbapply", "viridis", "ggplot2", "kableExtra", "knitr", "formatR", "randomForest", "M3C")
aa <- lapply(x, function(y) {
# get pakage name
pkg <- strsplit(y, "/")[[1]]
pkg <- pkg[length(pkg)]
# check if installed, if not then install
if (!pkg %in% installed.packages()[,"Package"])  {
if (grepl("/", y))  devtools::install_github(y, force = TRUE) else
install.packages(y)
}
# load package
a <- try(require(pkg, character.only = T), silent = T)
if (!a) remove.packages(pkg)
})
## add 'developer' to packages to be installed from github
x <- c("lubridate", "readxl", "pbapply", "viridis", "ggplot2", "kableExtra", "knitr", "formatR", "randomForest", "Rtsne")
aa <- lapply(x, function(y) {
# get pakage name
pkg <- strsplit(y, "/")[[1]]
pkg <- pkg[length(pkg)]
# check if installed, if not then install
if (!pkg %in% installed.packages()[,"Package"])  {
if (grepl("/", y))  devtools::install_github(y, force = TRUE) else
install.packages(y)
}
# load package
a <- try(require(pkg, character.only = T), silent = T)
if (!a) remove.packages(pkg)
})
scale_param <- scale(sels[, c("duration", "meanfreq", "sd", "freq.median", "freq.IQR", "time.IQR", "skew",  "kurt", "sp.ent", "time.ent", "entropy", "meandom", "mindom", "maxdom", "dfrange",  "modindx", "meanpeakf")])
tsne <- Rtsne(scale_param, dims = 2, perplexity=30, verbose=FALSE, max_iter = 5000)
head(tsne)
saveRDS(tsne, "./data/processed/tsne_on_acoustic_parameters_jun_2021.RDS")
Y <- as.data.frame(tsne$Y)
names(Y) <- c("T-SNE1", "T-SNE2")
sels <- data.frame(sels, Y)
Y <- as.data.frame(tsne$Y)
names(Y) <- c("TSNE1", "TSNE2")
sels <- data.frame(sels, Y)
ggplot(sels, aes(x = TSNE1, y = TSNE1, col = as.factor(round))) +
geom_point()  +
labs(color = "Round") +
scale_color_viridis_d(alpha = 0.4) +
theme_classic(base_size = 25) +
theme(legend.position = c(0.9, 0.8)) +
guides(colour = guide_legend(override.aes = list(size=10)))
Y
head(sels)
ggplot(sels, aes(x = TSNE1, y = TSNE1, col = as.factor(round))) +
geom_point()  +
labs(color = "Round") +
scale_color_viridis_d(alpha = 0.4) +
theme_classic(base_size = 25) +
# theme(legend.position = c(0.9, 0.8)) +
guides(colour = guide_legend(override.aes = list(size=10)))
str(sels)
# read ext sel tab calls
sels <- read.csv("./data/processed/tailored_budgie_calls_sel_tab.csv")
# keep only spectrographic parameters
sels <- sels[ , c("sound.files", "selec", "duration", "meanfreq", "sd", "freq.median", "freq.IQR", "time.IQR", "skew",  "kurt", "sp.ent", "time.ent", "entropy", "meandom", "mindom", "maxdom", "dfrange",  "modindx", "meanpeakf")]
sels$ID <- sapply(sels$sound.files, function(x) strsplit(x, "_")[[1]][1])
sels$month <- sapply(sels$sound.files, function(x) strsplit(x, "_")[[1]][2])
sels$day <- sapply(sels$sound.files, function(x) strsplit(x, "_")[[1]][3])
sels$year <- sapply(sels$sound.files, function(x) strsplit(x, "_")[[1]][4])
sels$date <- paste(sels$day, substr(sels$month, 0, 3), sels$year, sep = "-")
sl <- Sys.setlocale(locale = "en_US.UTF-8")
sels$date <- as.Date(sels$date, format = "%d-%b-%Y")
metadat <- read_excel_df("./data/raw/INBREStress_MasterDataSheet_14Nov19.xlsx")
# head(metadat)
sels$ID[sels$ID == "125YGMM"] <- "125YGHM"
sels$ID[sels$ID == "394YBHM"] <- "394WBHM"
# setdiff(sels$ID, metadat$Bird.ID)
# setdiff(metadat$Bird.ID, sels$ID)
sels$treatment <- sapply(1:nrow(sels), function(x) {
metadat$Treatment[metadat$Bird.ID == sels$ID[x]][1]
})
sels$treatment.room <- sapply(1:nrow(sels), function(x) {
metadat$Treatment.Room[metadat$Bird.ID == sels$ID[x]][1]
})
sels$round <- sapply(1:nrow(sels), function(x) {
metadat$Round[metadat$Bird.ID == sels$ID[x]][1]
})
sels$source.room <- sapply(1:nrow(sels), function(x) {
metadat$Source.Room[metadat$Bird.ID == sels$ID[x]][1]
})
sels$record.group <- sapply(1:nrow(sels), function(x) {
metadat$Record.Group[metadat$Bird.ID == sels$ID[x]][1]
})
# add week
out <- lapply(unique(sels$round), function(x){
Y <- sels[sels$round == x, ]
min_date <- min(Y$date)
week_limits <- min_date + seq(0, 100,  by = 7)
Y$week <- NA
for (i in 2:length(week_limits))
Y$week[Y$date >= week_limits[i - 1] & Y$date < week_limits[i]] <- i - 1
return(Y)
})
sels <- do.call(rbind, out)
sels$cort.baseline <- sapply(1:nrow(sels), function(x) {
if (sels$week[x] == 1)
out <- metadat$D3.CORT.Baseline[metadat$Bird.ID == sels$ID[x]][1]
if (sels$week[x] == 2)
out <- metadat$D7.CORT.Baseline[metadat$Bird.ID == sels$ID[x]][1]
if (sels$week[x] == 3)
out <- metadat$D14.CORT.Baseline[metadat$Bird.ID == sels$ID[x]][1]
if (sels$week[x] == 4)
out <- metadat$D21.CORT.Baseline[metadat$Bird.ID == sels$ID[x]][1]
if (sels$week[x] == 5)
out <- metadat$D28.CORT.Baseline[metadat$Bird.ID == sels$ID[x]][1]
return(out)
})
sels$cort.stress <- sapply(1:nrow(sels), function(x) {
if (sels$week[x] == 1)
out <- metadat$D3.CORT.Stress[metadat$Bird.ID == sels$ID[x]][1]
if (sels$week[x] == 2)
out <- metadat$D7.CORT.Stress[metadat$Bird.ID == sels$ID[x]][1]
if (sels$week[x] == 3)
out <- metadat$D14.CORT.Stress[metadat$Bird.ID == sels$ID[x]][1]
if (sels$week[x] == 4)
out <- metadat$D21.CORT.Stress[metadat$Bird.ID == sels$ID[x]][1]
if (sels$week[x] == 5)
out <- metadat$D28.CORT.Stress[metadat$Bird.ID == sels$ID[x]][1]
return(out)
})
sels$weight <- sapply(1:nrow(sels), function(x) {
if (sels$week[x] == 1)
out <- metadat$D3.Bird.Weight..g.[metadat$Bird.ID == sels$ID[x]][1]
if (sels$week[x] == 2)
out <- metadat$D7.Bird.Weight..g.[metadat$Bird.ID == sels$ID[x]][1]
if (sels$week[x] == 3)
out <- metadat$D14.Bird.Weight..g.[metadat$Bird.ID == sels$ID[x]][1]
if (sels$week[x] == 4)
out <- metadat$D21.Bird.Weight..g.[metadat$Bird.ID == sels$ID[x]][1]
if (sels$week[x] == 5)
out <- metadat$D28.Bird.Weight..g.[metadat$Bird.ID == sels$ID[x]][1]
return(out)
})
sels$breath.count <- sapply(1:nrow(sels), function(x) {
if (sels$week[x] == 1)
out <- metadat$D3.Breath.Count[metadat$Bird.ID == sels$ID[x]][1]
if (sels$week[x] == 2)
out <- metadat$D7.Breath.Count[metadat$Bird.ID == sels$ID[x]][1]
if (sels$week[x] == 3)
out <- metadat$D14.Bird.Weight..g.[metadat$Bird.ID == sels$ID[x]][1]
if (sels$week[x] == 4)
out <- metadat$D21.Bird.Weight..g.[metadat$Bird.ID == sels$ID[x]][1]
if (sels$week[x] == 5)
out <- metadat$D28.Bird.Weight..g.[metadat$Bird.ID == sels$ID[x]][1]
return(out)
})
tsne <- readRDS("./data/processed/tsne_on_acoustic_parameters_jun_2021.RDS")
Y <- as.data.frame(tsne$Y)
names(Y) <- c("TSNE1", "TSNE2")
sels <- data.frame(sels, Y)
ggplot(sels, aes(x = TSNE1, y = TSNE1, col = as.factor(round))) +
geom_point()  +
labs(color = "Round") +
scale_color_viridis_d(alpha = 0.4) +
theme_classic(base_size = 25) +
theme(legend.position = c(0.9, 0.8)) +
guides(colour = guide_legend(override.aes = list(size=10)))
ggplot(sels, aes(x = TSNE1, y = TSNE2, col = as.factor(round))) +
geom_point()  +
labs(color = "Round") +
scale_color_viridis_d(alpha = 0.4) +
theme_classic(base_size = 25) +
theme(legend.position = c(0.9, 0.8)) +
guides(colour = guide_legend(override.aes = list(size=10)))
ggplot(sels, aes(x = TSNE1, y = TSNE2, col = as.factor(round))) +
geom_point()  +
labs(color = "Round") +
scale_color_viridis_d(alpha = 0.4) +
theme_classic(base_size = 25) +
theme(legend.position = c(0.9, 0.3)) +
guides(colour = guide_legend(override.aes = list(size=10)))
ggplot(sels, aes(x = TSNE1, y = TSNE2, col = as.factor(round))) +
geom_point()  +
labs(color = "Round") +
scale_color_viridis_d(alpha = 0.4) +
theme_classic(base_size = 25) +
theme(legend.position = c(0.93, 0.3)) +
guides(colour = guide_legend(override.aes = list(size=10)))
ggplot(sels, aes(x = TSNE1, y = TSNE2, col = as.factor(round))) +
geom_point()  +
labs(color = "Round") +
scale_color_viridis_d(alpha = 0.4) +
theme_classic(base_size = 25) +
theme(legend.position = c(0.93, 0.2)) +
guides(colour = guide_legend(override.aes = list(size=10)))
ggplot(sels, aes(x = TSNE1, y = TSNE2, col = as.factor(round))) +
geom_point()  +
labs(color = "Round") +
scale_color_viridis_d(alpha = 0.4) +
theme_classic(base_size = 25) +
theme(legend.position = c(0.93, 0.25)) +
guides(colour = guide_legend(override.aes = list(size=10)))
